// promise syntax
let promise = new Promise( function( resolve, reject ) ) {
    // executor code, automatically called when promise is created

    // when it finishes the code, it should call one of:
    //    - resolve( value ) => state: 'fulfilled', result: value
    //    - reject( error ) => state: 'rejected', result: error
}

/*
The resulting promise has the properties:
    - state: pending -> settled ( fulfilled / rejected )
    - result - arbitrary value, initially undefined

    - the properties are internal, can only be accessed using .then/catch
*/

/*
    promise.then( successFunc, errorFunc );
    promise.catch( func ), same as .then( null, func )

    - if the promise is pending, .then/catch wait for the result,
    otherwise they execute immediately
*/

// an immediately resolved promise
let promise = new Promise( resolve => resolve( "done!" ) );

promise.then( alert ); // done! (right after the current code finishes)

alert( "code finished" ); // this alert shows first

/*
 ASYNC / AWAIT
    - async before a function => function returns a promise
    - await - takes a promise and pauses the function execution until the promise settles:
        - returns the result, value if resolved, or throws the rejected value
        
    ! await can only be used inside async functions

*/

// error handling
async function f() {

  try {
    let response = await fetch('http://no-such-url');
  } catch(err) {
    alert(err); // TypeError: failed to fetch
  }
}

f();

/* if try/catch is not present, the promise generated by the async function is rejected
   - can append .catch to handle it e.g.:
    f().catch( alert );

    - if not handled => unhandled promise error in the console
*/
